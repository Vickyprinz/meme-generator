{"ast":null,"code":"var _jsxFileName = \"/home/victor/phase-3/project/meme/client/src/pages/Meme.js\";\nimport React, { Component } from 'react';\nimport NavBar from '../components/NavBar';\nimport MemesCollection from '../components/memes-collection';\nimport MemeForm from '../components/Meme-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Memes extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      memes: [],\n      selectedMeme: null,\n      modalIsOpen: false,\n      currentImgBase64: null\n    };\n    this.getMemesFromApi = () => {\n      return fetch('https://api.imgflip.com/get_memes').then(resp => resp.json()).then(data => this.setState({\n        memes: data.data.memes.filter(meme => meme.box_count <= 2)\n      }));\n    };\n    this.toggleModal = selectedMeme => {\n      const image = selectedMeme.url;\n      const base_image = new Image();\n      base_image.src = image;\n      const base64 = this.getBase64Image(base_image);\n      this.setState({\n        modalIsOpen: !this.state.modalIsOpen,\n        selectedMeme: selectedMeme,\n        currentImgBase64: base64\n      });\n    };\n    this.getBase64Image = img => {\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = 400;\n      canvas.height = 400;\n      let ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      let dataURL = canvas.toDataURL('image/png', 0.5);\n      return dataURL;\n    };\n    this.renderForm = () => {\n      if (this.state.selectedMeme) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MemeForm, {\n            username: this.props.username,\n            selectedMeme: this.state.selectedMeme,\n            modalIsOpen: this.state.modalIsOpen,\n            currentImgBase64: this.state.currentImgBase64,\n            addToMyMemes: this.props.addToMyMemes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(MemesCollection, {\n            username: this.state.username,\n            memes: this.state.memes,\n            handleClick: this.toggleModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(MemesCollection, {\n          username: this.state.username,\n          memes: this.state.memes,\n          handleClick: this.toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 20\n        }, this);\n      }\n    };\n  }\n  componentDidMount() {\n    this.getMemesFromApi();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        signout: this.props.signout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), this.renderForm()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Memes;","map":{"version":3,"names":["React","Component","NavBar","MemesCollection","MemeForm","jsxDEV","_jsxDEV","Memes","constructor","arguments","state","memes","selectedMeme","modalIsOpen","currentImgBase64","getMemesFromApi","fetch","then","resp","json","data","setState","filter","meme","box_count","toggleModal","image","url","base_image","Image","src","base64","getBase64Image","img","canvas","document","createElement","width","height","ctx","getContext","drawImage","dataURL","toDataURL","renderForm","children","username","props","addToMyMemes","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","componentDidMount","render","signout"],"sources":["/home/victor/phase-3/project/meme/client/src/pages/Meme.js"],"sourcesContent":["import React, { Component } from 'react';\nimport NavBar from '../components/NavBar';\nimport MemesCollection from '../components/memes-collection';\nimport MemeForm from '../components/Meme-form'\n\nclass Memes extends Component {\n    state = { \n        memes: [],\n        selectedMeme: null,\n        modalIsOpen: false,\n        currentImgBase64: null\n     }\n\n    getMemesFromApi = () => {\n        return fetch('https://api.imgflip.com/get_memes')\n        .then(resp => resp.json())\n        .then(data => this.setState({memes: data.data.memes.filter(meme => meme.box_count <= 2)}))\n    \n    }\n\n    componentDidMount() {\n        this.getMemesFromApi()\n    }\n\n\n    toggleModal = (selectedMeme) => {\n        const image = selectedMeme.url\n        const base_image = new Image()\n        base_image.src = image\n        const base64 = this.getBase64Image(base_image)\n        this.setState({\n            modalIsOpen: !this.state.modalIsOpen, \n            selectedMeme: selectedMeme,\n            currentImgBase64: base64\n        })\n    }\n\n    getBase64Image = (img) => {\n        let canvas = document.createElement(\"canvas\");\n        canvas.width = 400;\n        canvas.height = 400;\n        let ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        let dataURL = canvas.toDataURL('image/png', 0.5);\n        return dataURL;\n    }\n\n    \n    renderForm = () => {\n        if (this.state.selectedMeme) {\n        return <div>\n        <MemeForm \n            username={this.props.username}\n            selectedMeme={this.state.selectedMeme}\n            modalIsOpen={this.state.modalIsOpen}\n            currentImgBase64={this.state.currentImgBase64}\n            addToMyMemes={this.props.addToMyMemes}\n        /> \n        <MemesCollection \n            username={this.state.username}\n            memes={this.state.memes} \n            handleClick={this.toggleModal}\n        />\n        </div>\n        } else {\n            return <MemesCollection \n            username={this.state.username}\n            memes={this.state.memes} \n            handleClick={this.toggleModal}\n        />\n        }\n    }\n\n    render() { \n        return ( \n            <div>\n\n                <NavBar signout={this.props.signout}/>\n                {this.renderForm()}\n\n            </div>\n         );\n    }\n}\n \nexport default Memes;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,eAAe,MAAM,gCAAgC;AAC5D,OAAOC,QAAQ,MAAM,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,KAAK,SAASN,SAAS,CAAC;EAAAO,YAAA;IAAA,SAAAC,SAAA;IAAA,KAC1BC,KAAK,GAAG;MACJC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,IAAI;MAClBC,WAAW,EAAE,KAAK;MAClBC,gBAAgB,EAAE;IACrB,CAAC;IAAA,KAEFC,eAAe,GAAG,MAAM;MACpB,OAAOC,KAAK,CAAC,mCAAmC,CAAC,CAChDC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAACG,IAAI,IAAI,IAAI,CAACC,QAAQ,CAAC;QAACV,KAAK,EAAES,IAAI,CAACA,IAAI,CAACT,KAAK,CAACW,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,IAAI,CAAC;MAAC,CAAC,CAAC,CAAC;IAE9F,CAAC;IAAA,KAODC,WAAW,GAAIb,YAAY,IAAK;MAC5B,MAAMc,KAAK,GAAGd,YAAY,CAACe,GAAG;MAC9B,MAAMC,UAAU,GAAG,IAAIC,KAAK,EAAE;MAC9BD,UAAU,CAACE,GAAG,GAAGJ,KAAK;MACtB,MAAMK,MAAM,GAAG,IAAI,CAACC,cAAc,CAACJ,UAAU,CAAC;MAC9C,IAAI,CAACP,QAAQ,CAAC;QACVR,WAAW,EAAE,CAAC,IAAI,CAACH,KAAK,CAACG,WAAW;QACpCD,YAAY,EAAEA,YAAY;QAC1BE,gBAAgB,EAAEiB;MACtB,CAAC,CAAC;IACN,CAAC;IAAA,KAEDC,cAAc,GAAIC,GAAG,IAAK;MACtB,IAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC7CF,MAAM,CAACG,KAAK,GAAG,GAAG;MAClBH,MAAM,CAACI,MAAM,GAAG,GAAG;MACnB,IAAIC,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;MACjCD,GAAG,CAACE,SAAS,CAACR,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;MACxB,IAAIS,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,EAAE,GAAG,CAAC;MAChD,OAAOD,OAAO;IAClB,CAAC;IAAA,KAGDE,UAAU,GAAG,MAAM;MACf,IAAI,IAAI,CAAClC,KAAK,CAACE,YAAY,EAAE;QAC7B,oBAAON,OAAA;UAAAuC,QAAA,gBACPvC,OAAA,CAACF,QAAQ;YACL0C,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACD,QAAS;YAC9BlC,YAAY,EAAE,IAAI,CAACF,KAAK,CAACE,YAAa;YACtCC,WAAW,EAAE,IAAI,CAACH,KAAK,CAACG,WAAY;YACpCC,gBAAgB,EAAE,IAAI,CAACJ,KAAK,CAACI,gBAAiB;YAC9CkC,YAAY,EAAE,IAAI,CAACD,KAAK,CAACC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACxC,eACF9C,OAAA,CAACH,eAAe;YACZ2C,QAAQ,EAAE,IAAI,CAACpC,KAAK,CAACoC,QAAS;YAC9BnC,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAM;YACxB0C,WAAW,EAAE,IAAI,CAAC5B;UAAY;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAChC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACI;MACN,CAAC,MAAM;QACH,oBAAO9C,OAAA,CAACH,eAAe;UACvB2C,QAAQ,EAAE,IAAI,CAACpC,KAAK,CAACoC,QAAS;UAC9BnC,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAM;UACxB0C,WAAW,EAAE,IAAI,CAAC5B;QAAY;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAChC;MACF;IACJ,CAAC;EAAA;EAnDDE,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACvC,eAAe,EAAE;EAC1B;EAmDAwC,MAAMA,CAAA,EAAG;IACL,oBACIjD,OAAA;MAAAuC,QAAA,gBAEIvC,OAAA,CAACJ,MAAM;QAACsD,OAAO,EAAE,IAAI,CAACT,KAAK,CAACS;MAAQ;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,EACrC,IAAI,CAACR,UAAU,EAAE;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEhB;EAEd;AACJ;AAEA,eAAe7C,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}